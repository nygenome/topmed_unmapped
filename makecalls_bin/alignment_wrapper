#!/usr/bin/python 

################################################################################
### COPYRIGHT ##################################################################

# Copyright (c) 2020, New York Genome Center
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################# /COPYRIGHT ###
################################################################################



################################################################################
### MODULES ####################################################################

import sys, uuid, os
from optparse import OptionParser
from subprocess import check_output, Popen, PIPE

################################################################### /MODULES ###
################################################################################



################################################################################
### FUNCTIONS ##################################################################

def readbedqt(filepath):
	if filepath == 'stdin':
		bedseq = sys.stdin
	else:
		bedseq = open(filepath, 'r')
	for line in bedseq:
		chromosome, start, end, name, score, strand, query, target = line.rstrip().split('\t')[:8]
		yield chromosome, int(start), int(end), name, score, strand, query, target			

def revcomp(sequence,rcd):
	return ''.join(rcd[c] for c in reversed(sequence))
		
def wrap(sid, desc, seq, dev, cpl=80):
	if desc:
		desc = ' ' + desc
	dev.write('>' + sid + desc + '\n')
	for x in range(0,len(seq),cpl):
		dev.write(seq[x:x+cpl] + '\n')
		
################################################################# /FUNCTIONS ###
################################################################################



################################################################################
### ARGUMENTS,OPTIONS ##########################################################

parser = OptionParser(usage = "\n%prog [options]", version="%prog 0.1")

parser.add_option(
	"-b",
	metavar = "FILE",
	type = "string",
	dest = "bed",
	default = 'stdin',
	help = "Input BEDQT filename (default = 'stdin')"
	)

parser.add_option(
	"-p",
	metavar = "STR",
	type = "string",
	dest = "prefix",
	default = '',
	help = "TEMP file prefix ['']"
	)

(opt, args) = parser.parse_args()

######################################################### /ARGUMENTS,OPTIONS ###
################################################################################



################################################################################
### CONSTANTS ##################################################################

rcd={'a':'t','t':'a','A':'T','T':'A',
	'g':'c','c':'g','G':'C','C':'G',
	'r':'y','y':'r','R':'Y','Y':'R',
	'k':'m','m':'k','K':'M','M':'K',
	'b':'v','v':'b','B':'V','V':'B',
	'd':'h','h':'d','D':'H','H':'D',
	's':'s','w':'w','S':'S','W':'W',
	'.':'.','-':'-','n':'n','N':'N'}

age = 'age_align'
ageparse = 'age_parse'

################################################################# /CONSTANTS ###
################################################################################



################################################################################
### MAIN #######################################################################
			
if __name__ == "__main__":
	
	bedqt = readbedqt(opt.bed)
	for chromosome, start, end, name, score, strand, query, target in bedqt:
		uid = str(uuid.uuid4())

		qfname = opt.prefix + 'query.'+uid+'.fa'
		qfasta = open(qfname, 'a')
		if strand == '-':
			query = revcomp(query, rcd)
		wrap(name + ':' + strand, '', query, qfasta)
		qfasta.close()

		tfname = opt.prefix + 'target.'+uid+'.fa'
		tfasta = open(tfname, 'a')
		wrap(chromosome + ':' + str(start), '', target, tfasta)
		tfasta.close()


		age_command = [age, '-indel', tfname, qfname]
		ageparse_command = [ageparse, '-i', '-']

		age_process = Popen(age_command, stdout=PIPE)

		age_output = check_output(ageparse_command, stdin=age_process.stdout).rstrip().split('\t')
		age_output[7] = score + '|' + age_output[7]	
		sys.stdout.write('\t'.join(age_output[:10]) + '\n')

		os.remove(qfname)
		os.remove(tfname)
	
###################################################################### /MAIN ###
################################################################################
