#!/usr/bin/python 

################################################################################
### COPYRIGHT ##################################################################

# Copyright (c) 2020, New York Genome Center
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################# /COPYRIGHT ###
################################################################################



################################################################################
### MODULES ####################################################################

import sys
from optparse import OptionParser
import re

################################################################### /MODULES ###
################################################################################




################################################################################
### FUNCTIONS ##################################################################

def readfasta(filepath):
	name = None
	if filepath == 'stdin':
		fasta = sys.stdin
	else:
		fasta = open(filepath, 'r')
	for line in fasta:
		if line[0] == '>':
			if name:
				yield(name,description,''.join(sequence))
			header = line.rstrip()[1:].split(' ')
			name = header[0]
			description = ' '.join(header[1:])
			sequence = []
		else:
			sequence.append(line.rstrip())
	if filepath != 'stdin':
		fasta.close()
	if name:
		yield(name, description, ''.join(sequence))

def readbed(filepath):
	if filepath == 'stdin':
		bedseq = sys.stdin
	else:
		bedseq = open(filepath, 'r')
	for line in bedseq:
		chromosome, start, end, name, score, strand = line.rstrip().split('\t')[:6]
		yield chromosome, int(start), int(end), name, score, strand			
		
################################################################# /FUNCTIONS ###
################################################################################




################################################################################
### ARGUMENTS,OPTIONS ##########################################################

parser = OptionParser(usage = "\n%prog [options]", version="%prog 0.1")

parser.add_option(
	"-b",
	metavar = "FILE",
	type = "string",
	dest = "bed",
	default = 'stdin',
	help = "Input BED filename (default = 'stdin')"
	)

parser.add_option(
	"-q",
	metavar = "FILE",
	type = "string",
	dest = "query",
	default = None,
	help = "Input query FASTA filename [MANDATORY]"
	)

parser.add_option(
	"-t",
	metavar = "FILE",
	type = "string",
	dest = "target",
	default = None,
	help = "Input target FASTA filename [MANDATORY]"
	)

parser.add_option(
	"-s",
	metavar = "INT",
	type = "int",
	dest = "slop",
	default = 0,
	help = "Target slop bp [0]"
	)


(opt, args) = parser.parse_args()

######################################################### /ARGUMENTS,OPTIONS ###
################################################################################




################################################################################
### CONSTANTS ##################################################################

################################################################# /CONSTANTS ###
################################################################################




################################################################################
### MAIN #######################################################################
			
if __name__ == "__main__":

	bed = readbed(opt.bed)
	qfasta = readfasta(opt.query)
	tfasta = readfasta(opt.target)

	queries = {}
	for name, description, sequence in qfasta:
		queries[name] = sequence

	targets = {}
	for name, description, sequence in tfasta:
		targets[name] = sequence

	for chromosome, start, end, name, score, strand in bed:
		query = queries[name]
		target = targets[chromosome][max([start-opt.slop, 0]):(end+opt.slop)]
		print '\t'.join(str(v) for v in [chromosome, max([start-opt.slop, 0]), end+opt.slop, name, score, strand, query, target])

###################################################################### /MAIN ###
################################################################################
