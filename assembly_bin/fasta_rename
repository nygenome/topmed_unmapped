#!/usr/bin/env python 

################################################################################
### COPYRIGHT ##################################################################

# Copyright (c) 2020, New York Genome Center
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

################################################################# /COPYRIGHT ###
################################################################################



################################################################################
### MODULES ####################################################################

import sys
from optparse import OptionParser

################################################################### /MODULES ###
################################################################################




################################################################################
### FUNCTIONS ##################################################################

def wrap(name, description, sequence, device, cpl=80):
	if description:
		description = ' ' + description
	device.write('>' + name + description + '\n')
	for x in range(0, len(sequence), cpl):
		device.write(sequence[x:x+cpl] + '\n')

def readfasta(filepath):
	name = None
	if filepath == 'stdin':
		fasta = sys.stdin
	else:
		fasta = open(filepath, 'r')
	for line in fasta:
		if line[0] == '>':
			if name:
				yield(name,description,''.join(sequence))
			header = line.rstrip()[1:].split(' ')
			name = header[0]
			description = ' '.join(header[1:])
			sequence = []
		else:
			sequence.append(line.rstrip())
	if filepath != 'stdin':
		fasta.close()
	if name:
		yield(name, description, ''.join(sequence))
			
def renamefasta(fasta, prefix, pad):
	if prefix:
		prefix += '_'
	c = 0
	for name, description, sequence in fasta:
		c += 1
		yield prefix + str(c).zfill(pad), '', sequence
	

################################################################# /FUNCTIONS ###
################################################################################




################################################################################
### ARGUMENTS,OPTIONS ##########################################################

parser = OptionParser(usage = "\n%prog [options]", version="%prog 0.1")

parser.add_option(
	"-i",
	metavar = "FILE",
	type = "string",
	dest = "input_file",
	default = 'stdin',
	help = "input FASTA filename (default = 'stdin')"
	)

parser.add_option(
	"-p",
	metavar = "STR",
	type = "string",
	dest = "prefix",
	default = '',
	help = "fasta prefix (default = None)"
	)

parser.add_option(
	"-z",
	metavar = "INT",
	type = "int",
	dest = "pad",
	default = 0,
	help = "zfill length (default = 5)"
	)

(opt, args) = parser.parse_args()

######################################################### /ARGUMENTS,OPTIONS ###
################################################################################




################################################################################
### CONSTANTS ##################################################################

################################################################# /CONSTANTS ###
################################################################################




################################################################################
### MAIN #######################################################################
			
if __name__ == "__main__":
	fasta = readfasta(opt.input_file)
	renamed_fasta = renamefasta(fasta, opt.prefix, opt.pad)
	for name, description, sequence, in renamed_fasta:
		if sequence:
			wrap(name, description, sequence, sys.stdout, cpl=80)			

###################################################################### /MAIN ###
################################################################################
